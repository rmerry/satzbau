#!/usr/bin/env node

/*
Satzbau - A static syntax highlighter for code blocks wihtin HTML files
Copyright © 2017  Richard Merry

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

'use strict'

const CommandLineArgs = require('command-line-args')

const Dom         = require('../lib/dom.js')
const Fs          = require('fs')
const Highlighter = require('../lib/highlighter.js')
const Logger      = require('../lib/logger.js')
const Styles      = require('../lib/styles.js')
const TreeWalker  = require('../lib/treewalker.js')

const log        = new Logger('info')
const versionNum = '0.0.1'

// The command line argument configuration; see:
// https://www.npmjs.com/package/command-line-args
const optionDefinitions = [
  { name: 'debug',                           type: Boolean, defaultValue: false,            },
  { name: 'embed-css',                       type: Boolean, defaultValue: false,            },
  { name: 'leave-satzbau-attrs',             type: Boolean, defaultValue: false,            },
  { name: 'dry',                 alias: 'D', type: Boolean, defaultValue: false,            },
  { name: 'help',                alias: 'h', type: Boolean, defaultValue: false,            },
  { name: 'match-files',         alias: 'm', type: String,  defaultValue: '*.html',         },
  { name: 'max-depth',           alias: 'd', type: Number,  defaultValue: Number.MAX_VALUE, },
  { name: 'recursive',           alias: 'r', type: Boolean, defaultValue: false,            },
  { name: 'silent',              alias: 'S', type: Boolean, defaultValue: false,            },
  { name: 'style-sheet',         alias: 's', type: String,  defaultValue: 'github',         },
  { name: 'tag-selector',        alias: 't', type: String,  defaultValue: 'pre code',       },
  { name: 'verbose',             alias: 'v', type: Boolean, defaultValue: false,            },
  { name: 'version',             alias: 'V', type: Boolean, defaultValue: false,            },

  { name: 'files', type: String, multiple: true, defaultOption: true, },
]

/*
Parses and validates the command line arguments passed to the program, it
returns a program configuration object.
*/
function parseArgs() {
  let conf; try {
    conf = CommandLineArgs(optionDefinitions, { partial: false, })
  } catch(err) {
    log.error(undefined, err.message)
    usage(); process.exit(1)
  }

  // version trumps help
  if (conf.version) {
    version(); process.exit(0)
  }
  // help trumps everything else
  if (conf.help) {
    usage(); process.exit(0)
  }

  // validation: files
  if (conf.files === undefined) {
    log.error(undefined, 'error: must specify one or more files and/or directories')
    usage(); process.exit(1)
  }
  // validation: max-depth
  if (conf['max-depth'] != Number.MAX_VALUE) {
    if (!Number.isSafeInteger(conf['max-depth'])) {
      log.error(undefined, `error: max-depth must be in range [1,${Number.MAX_VALUE}]`)
      usage(); process.exit(1)
    } else if (conf['max-depth'] < 1) {
      log.error(undefined, 'error: max-depth must be a possitive integer')
      usage(); process.exit(1)
    }
  }

  // set logging verbosity level
  if (conf.silent) {
    conf.logLevel = 'silent'
  } else if (conf.debug) {
    conf.logLevel = 'debug'
  } else if (conf.verbose) {
    conf.logLevel = 'info'
  } else {
    conf.logLevel = 'error'
  }

  return conf
}

/*
Prints program usage information.
*/
function usage() {
  log.info(
`usage: satzbau [options] files...

Highlight Control:
 -a, --auto-language
 -f, --fallback-language LANG

The language to use when -

 -t, --tag-selector TAG    The  tag selector  points  to the  HTML element  you
                           would  like to  apply highlighting  to. See  TAG for
                           more details. (default \`pre code')
     --embed-css           The CSS  styles sheet will be  embedded directly into
                           the  header  section  of  the  HTML  documents  where
                           highlighting is applied.

Output Control:
 -D, --dry                 Performs a dry-run. No files will be modified.
 -d, --max-depth LEVEL     Descend LEVEL  (a non-negative  integer) directories
                           deep;  this value  is only  meaningful when  used in
                           conjunction with the -r option. (default infinity)
 -m, --match-files PATTERN Only files  matching PATTERN will be  processed. The
                           pattern is a glob like those accepted by many shells
                           (see  PATTERN).  Only  the  base of  the  file  name
                           (the path  with the leading directories  removed) is
                           tested. Because the leading directories are removed,
                           the file names  considered for a match  with -m will
                           never include a slash, so \`-m a/b' will never match
                           anything. (default \`*.html?')
 -r, --recursive           Search through directories recursively.

Miscellaneous:
 -h, --help                Print this message.
 -s, --silent              Print no output.
 -v, --verbose             Talkative output.
 -V, --version             Display version information and exit.
     --debug               Very talkative output.
     --no-report           Very talkative output.`)
}

/*
Prints program version and license information.
*/
function version() {
  log.info(
`satzbau ${versionNum}
Copyright © 2017 Richard Merry
Licence GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.`)
}

/*
Execution starts here.
*/

const conf = parseArgs()
log.setLevel(conf.logLevel)

// returns a promise
const getFileList = TreeWalker.walk({
  files: conf.files,
  glob: conf['match-files'],
  log,
  maxDepth: conf['max-depth'],
  recursive: conf.recursive,
})

// returns a promise
const getStyleSheet = Styles.get(conf['style-sheet'])

Promise.all([getFileList, getStyleSheet])
  .then(([files, styleSheet]) => {
    files.forEach(f => {

      // read html file and create dom object from it
      let html; try {
        html = Fs.readFileSync(f)
      } catch (err) {
        log.error(err)
        return
      }

      // loop through code blocks, apply highlighting as we go
      let updatedBlocks = 0
      const dom = new Dom(html)
      dom.satzbauBlocks().each((i, b) => {
        const previousText = b.text
        b.text = Highlighter.highlight(b.text, { language: b.language })

        // a change was made, log it
        if (previousText !== b.text) {
          updatedBlocks = updatedBlocks + 1
        }
      })

      if (updatedBlocks === 0) { return }

      // remove satzbau attribute(s)
      if (conf['embed-css']) {
        dom.embedStyleSheet(styleSheet)
      }

      // embed the css in the document if requested
      if (!conf['leave-satzbau-attrs']) {
        dom.removeSatzbauAttrs()
      }

      // save the file back to disk
      if (!conf['dry-run']) {
        try {
          Fs.writeFileSync(f+'.html', dom.toString())
        } catch (err) {
          log.error(err)
          return
        }
      }
    })
  })
  .catch(err => {
    log.fatal(err)
  })
